generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Instructor {
  id      String   @id @default(uuid())
  userId  String?  @unique @db.VarChar
  User    User?    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Learner Learner?
  Lecture Lecture?
}

model Learner {
  id           String      @id @default(uuid())
  userId       String?     @unique @db.VarChar
  instructorId String?     @unique @db.VarChar
  Instructor   Instructor? @relation(fields: [instructorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  User         User?       @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Lecture      Lecture?
}

model Lecture {
  id           String       @id @default(uuid())
  instructorId String?      @unique @db.VarChar
  learnerId    String?      @unique @db.VarChar
  name         String       @db.VarChar
  description  String?      @db.VarChar
  subject      SubjectType
  createdAt    DateTime?    @default(now()) @db.Timestamp(6)
  Instructor   Instructor?  @relation(fields: [instructorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Learner      Learner?     @relation(fields: [learnerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Test         Test?
}

model Phone {
  id        String    @id @default(uuid())
  profileId String?   @unique @db.VarChar
  number    String    @db.VarChar
  phoneType Phonetype
  createdAt DateTime? @default(now()) @db.Timestamp(6)
  Profile   Profile?  @relation(fields: [profileId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Profile {
  id          String    @id @default(uuid())
  userId      String?   @unique @db.VarChar
  first_name  String    @db.VarChar
  second_name String    @db.VarChar
  createdAt   DateTime? @default(now()) @db.Timestamp(6)
  Phone       Phone?
  User        User?     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Question {
  id          String  @id @default(uuid())
  testId      String? @unique @db.VarChar
  description String? @db.VarChar
  answer      String? @db.VarChar
  Test        Test?   @relation(fields: [testId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Test {
  id          String    @id @default(uuid())
  name        String    @db.VarChar
  description String?   @db.VarChar
  lectureId   String?   @unique @db.VarChar
  createdAt   DateTime? @default(now()) @db.Timestamp(6)
  Question    Question?
  Lecture     Lecture?  @relation(fields: [lectureId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model User {
  id         String      @id @default(uuid())
  email      String      @unique @db.VarChar
  password   String      @db.VarChar
  role       UserRole
  createdAt  DateTime?   @default(now()) @db.Timestamp(6)
  Instructor Instructor?
  Learner    Learner?
  Profile    Profile?
}

enum Phonetype {
  HOME
  MOBILE
  OFFICE
}

enum SubjectType {
  BIOLOGY
  MATHS
  SOCIAL_SCIENCE
}

enum UserRole {
  ADMIN
  CLIENT
  GUEST
}
